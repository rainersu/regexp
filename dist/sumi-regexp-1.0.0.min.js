/*!
sumi-regexp v1.0.0
http://rainersu.github.io/regexp
A wrapper for the JavaScript RegExp object to make regular expressions simple and smart.
(c) 2015 Rainer Su( rainersu@foxmail.com | http://cn.linkedin.com/in/rainersu | QQ: 2627001536 )
*/

!function(a,b){"function"==typeof define&&define.amd?define([],function(){return b()}):"object"==typeof exports?module.exports=b():a.sumiRegExp=b()}(this,function(){function a(a){return h.call(a).split(/\W+/)[2].toLowerCase()}function b(a,b){for(var c in b)g.call(b,c)&&(a[c]=b[c])}function c(a,b,c){return b=0|b,c=c?"g":"",a.ignoreCase&&(c+="i"),a=a.source,a=b>1?"^(?:"+a+")$":b>0?"(?:^|\\b)(?:"+a+")(?:$|\\b)":a,b="/"+a+"/"+c,l[b]||(l[b]=new RegExp(a,c))}function d(c,e,f,g){if(!(this instanceof d))return new d(c,e,f,g);var h="regexp"===a(c);g=+g,b(this,{ignoreCase:h&&g!==g?c.ignoreCase:!!g,source:h?c.source:c,keys:"string"===a(e)?e.split(/[\s,;|]+/):e&&j.call(e),parser:f||k})}var e=void 0,f=Object,g=f.prototype.hasOwnProperty,h=f.prototype.toString,j=Array.prototype.slice,k=Function(),l={};b(d,{reg:function(a){this[a]=new Match(i.pattern,i.keys,i.parser)}}),b(d.prototype,{is:function(a){return c(this,2).test(a)}});var m=e+"",n=typeof window!==m?window:typeof global!==m?global:this||1;return n.Pattern=n.Pattern||d,d});
//# sourceMappingURL=sumi-regexp-1.0.0.min.js.map